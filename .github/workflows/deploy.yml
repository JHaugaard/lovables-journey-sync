name: Deploy to Hostinger

# Trigger: Run on every push to main branch and manual dispatch
on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual trigger

# Environment variables
env:
  NODE_VERSION: '18'
  BUILD_PATH: './dist'
  DEPLOY_PATH: '/domains/haugaard.dev/public_html/roundtrip/'
  VITE_BASE_PATH: '/'

# Jobs to run
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Get the code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 4: Stamp version.txt for cache-busting
      - name: Stamp version.txt
        run: |
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          sed -i "s|{{BUILD_TIME}}|$BUILD_TIME|g" public/version.txt
          sed -i "s|{{TIMESTAMP}}|$TIMESTAMP|g" public/version.txt
          sed -i "s|^Base Path: .*|Base Path: ${{ env.VITE_BASE_PATH }}|g" public/version.txt

      # Step 5: Build the application
      - name: Build application
        run: npm run build

      # Step 5.5: Add deployment markers
      - name: Add deployment markers
        run: |
          echo "Primary Path: /domains/haugaard.dev/public_html/roundtrip/" > dist/whereami.txt
          echo "Deploy Time: $(date)" >> dist/whereami.txt

      # Step 5: Verify build output
      - name: Verify build
        run: |
          echo "Build completed successfully"
          ls -la dist/
          echo "Build size:"
          du -sh dist/
          echo "Files in build:"
          find dist/ -type f -name "*.js" -o -name "*.css" -o -name "*.html" | head -10

      # Step 6: Create backup before deployment
      - name: Create backup directory
        run: |
          mkdir -p ./backup-current
          BACKUP_DIR="backup-$(date +%Y%m%d-%H%M%S)"
          echo "BACKUP_DIR=$BACKUP_DIR" >> $GITHUB_ENV
          echo "Creating backup directory: $BACKUP_DIR"


      # Step 7: Backup current production (continue on error)
      - name: Backup current production
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./backup-current/
          server-dir: ${{ env.DEPLOY_PATH }}
          method: download
        continue-on-error: true

      # Step 8: Deploy to primary path (correct Hostinger structure)
      - name: Deploy to /domains/haugaard.dev/public_html/roundtrip/
        id: deploy_primary
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ${{ env.BUILD_PATH }}/
          server-dir: /domains/haugaard.dev/public_html/roundtrip/
          dangerous-clean-slate: true
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/.DS_Store
            **/Thumbs.db
            **/*.map
            **/backup-*/**
        continue-on-error: true

      # Step 9: Update marker for fallback path and deploy
      - name: Update marker for fallback 1 (/haugaard.dev/public_html/roundtrip/)
        id: set_fallback1_marker
        if: failure() && steps.deploy_primary.outcome == 'failure'
        run: |
          echo "Fallback Path: /haugaard.dev/public_html/roundtrip/" > dist/whereami.txt
          echo "Deploy Time: $(date)" >> dist/whereami.txt

      - name: Deploy to fallback 1 (/haugaard.dev/public_html/roundtrip/)
        id: deploy_fallback1
        if: failure() && steps.deploy_primary.outcome == 'failure'
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ${{ env.BUILD_PATH }}/
          server-dir: /haugaard.dev/public_html/roundtrip/
          dangerous-clean-slate: true
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/.DS_Store
            **/Thumbs.db
            **/*.map
            **/backup-*/**

      - name: Update marker for fallback 2 (/public_html/roundtrip/)
        id: set_fallback2_marker
        if: failure() && steps.deploy_fallback1.outcome == 'failure'
        run: |
          echo "Fallback Path: /public_html/roundtrip/" > dist/whereami.txt
          echo "Deploy Time: $(date)" >> dist/whereami.txt
        
      - name: Deploy to fallback 2 (/public_html/roundtrip/)
        id: deploy_fallback2
        if: failure() && steps.deploy_fallback1.outcome == 'failure'
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ${{ env.BUILD_PATH }}/
          server-dir: /public_html/roundtrip/
          dangerous-clean-slate: true
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/.DS_Store
            **/Thumbs.db
            **/*.map
            **/backup-*/**

      # Step 10: HTTP verification with path detection
      - name: Verify deployment via HTTP
        run: |
          echo "üîç Verifying deployment..."
          sleep 15  # Give server time to update
          
          # Check whereami.txt to verify active deployment path
          echo "Checking deployment path marker..."
          curl -s "https://roundtrip.haugaard.dev/whereami.txt?cache_bust=$(date +%s)" || echo "Failed to fetch whereami.txt"
          
          # Check version.txt for updates
          echo "Checking version.txt..."
          curl -s "https://roundtrip.haugaard.dev/version.txt?cache_bust=$(date +%s)" || echo "Failed to fetch version.txt"
          
          # Check if homepage loads
          echo "Checking homepage..."
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://roundtrip.haugaard.dev/?cache_bust=$(date +%s)")
          echo "Homepage HTTP Status: $HTTP_STATUS"
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Site is responding correctly"
          else
            echo "‚ö†Ô∏è Site returned HTTP $HTTP_STATUS"
          fi
          
          echo "üöÄ Deployment verification completed!"
          echo "Deployment time: $(date)"
          echo "Build size: $(du -sh dist/)"

      # Step 10: Rollback on failure (if needed)
      - name: Rollback on deployment failure
        if: failure() && steps.deploy_primary.outcome == 'failure'
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./backup-current/
          server-dir: ${{ env.DEPLOY_PATH }}
        continue-on-error: true

      # Step 11: Cleanup old backups (keep last 5)
      - name: Cleanup old backups
        run: |
          echo "Deployment pipeline completed"
          echo "Backup created: ${{ env.BACKUP_DIR }}"
        continue-on-error: true